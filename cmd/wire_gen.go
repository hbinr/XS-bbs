// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"xs.bbs/internal/app"
	controller2 "xs.bbs/internal/app/community/controller"
	dao2 "xs.bbs/internal/app/community/dao"
	service2 "xs.bbs/internal/app/community/service"
	"xs.bbs/internal/app/user/controller"
	"xs.bbs/internal/app/user/dao"
	"xs.bbs/internal/app/user/service"
	"xs.bbs/pkg/conf"
	"xs.bbs/pkg/database"
	"xs.bbs/pkg/log"
	"xs.bbs/pkg/tool/snowflake"
)

// Injectors from wire.go:

func initWebApp() (*app.WebApp, error) {
	config, err := conf.Init()
	if err != nil {
		return nil, err
	}
	err = log.Init(config)
	if err != nil {
		return nil, err
	}
	err = snowflake.Init(config)
	if err != nil {
		return nil, err
	}
	engine, err := app.InitEngine(config)
	if err != nil {
		return nil, err
	}
	db := database.Init(config)
	userDao := &dao.UserDao{
		DB: db,
	}
	userService := &service.UserService{
		Dao: userDao,
	}
	userController, err := controller.NewUserController(engine, userService)
	if err != nil {
		return nil, err
	}
	communityDao := &dao2.CommunityDao{
		DB: db,
	}
	communityService := &service2.CommunityService{
		Dao: communityDao,
	}
	communityController, err := controller2.NewCommunityController(engine, communityService)
	if err != nil {
		return nil, err
	}
	webApp := &app.WebApp{
		Engine:        engine,
		Config:        config,
		UserCtrl:      userController,
		CommunityCtrl: communityController,
	}
	return webApp, nil
}
